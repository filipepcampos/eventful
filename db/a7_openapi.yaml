openapi: 3.0.0

info:
  version: '1.0'
  title: 'LBAW Eventful Web API'
  description: 'Web Resources Specification (A7) for Eventful'

servers:
- url: http://lbaw2122.lbaw.fe.up.pt
  description: Production server

externalDocs:
  description: Find more info here.
  url: https://youtu.be/dQw4w9WgXcQ       # TODO: To be changed

tags:
  - name: 'M01: Authentication and User Profile'
  - name: 'M02: Events'
  - name: 'M03: User Interactions'
  - name: 'M04: Static Pages'     # TODO: Add more
  - name: 'M05: Reports'
  - name: 'M06: Administration'

# Accesses:
# -> PUB - Public
# -> USR - Authenticated user
# -> ADM - Administrator
# -> ATT - Event attendee
# -> HOST - Event host
# -> AUT - Author of a comment
# -> REA - Reader of a comment AKA not the comment author AKA comment rater
# -> BLK - Blocked user

# Responses Used:
# -> 200 - The request succeeded, no redirecting
# -> 302 - URL has been changed temporarily AKA redirected successfully
# -> 403 - The client does not have access rights to the content

# Pages: Home page, login, registration, event, event creation, search
# Everything else will be dynamically created in said pages
# Example: Creating a comment will be done in the event page, hence why we don't have a create comment page, but an api call to the database


# TODO
# DONE -> Add/edit/delete comment
# DONE -> Add/change comment rating
# DONE -> Create/update/delete event
# DONE -> Join/leave event
# DONE -> Payment

# DONE -> Recover password
# -> Invitations and request notification dismissal
# TODO (complete requests) -> Create/Accept/deny invite + requests

# DONE -> Add user report
# DONE -> Add comment report
# DONE -> Add event report
# DONE -> Remove reports (by admin)
# DONE -> Block/Unblock user (admin)
# DONE -> Write unblock appeal

# DONE -> Update/Delete user
# VERIFY -> Create/update/delete post
# VERIFY -> Create/delete poll
# VERIFY -> Vote on option


paths:

  # --------------------------------- LOGIN/LOGOUT ---------------------------------

  /login:
    get:
      operationId: R101
      summary: 'R101: Show Login Form'
      description: 'Provide login form. Access: PUB'
      tags:
        - 'M01: Authentication and User Profile'
      responses:
        '200':
          description: 'Show login form'

    post:
      operationId: R102
      summary: 'R102: Login Action'
      description: 'Processes the login form submission. Access: PUB'
      tags:
        - 'M01: Authentication and User Profile'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                  - username
                  - password
      responses:
        '302':
          description: 'Redirect after processing the login credentials.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Successful authentication. Redirect to user profile.'
                  value: '/user/{user_id}'
                302Failure:
                  description: 'Failed authentication. Redirect to login form.'
                  value: '/login'
  
  /logout:
    post:
      operationId: R103
      summary: 'R103: Logout Action'
      description: 'Logout the current authenticated user. Access: USR, ADM'
      tags:
        - 'M01: Authentication and User Profile'
      responses:
        '302':
          description: 'Redirect after processing logout.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Successful logout. Redirect to login form.'     # 302Failure missing
                  value: '/login'

  # --------------------------------- REGISTER ---------------------------------

  /register:
    get:
      operationId: R104
      summary: 'R104: Show Register Form'
      description: 'Provide new user registration form. Access: PUB'
      tags:
        - 'M01: Authentication and User Profile'
      responses:
        '200':
          description: 'Show register UI'

    post:
      operationId: R105
      summary: 'R105: Register Action'
      description: 'Processes the new user registration form submission. Access: PUB'
      tags:
        - 'M01: Authentication and User Profile'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                  format: password
                name:
                  type: string
                picture:                  # PFP not required
                  type: string
                  format: binary
                birthdate:
                  type: string
                  format: date
              required:
                - username
                - email
                - password
                - name
                - birthdate
      responses:
        '302':
          description: 'Redirect after processing the new user information.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Successful authentication. Redirect to user profile.'
                  value: '/user/{user_id}'
                302Failure:
                  description: 'Failed authentication. Redirect to register form.'
                  value: '/register'

  # --------------------------------- RECOVER PASSWORD ---------------------------------

  /recover-password:
    get:
      operationId: R106
      summary: 'R106: Show Recover Password Form'
      description: 'Provide password recover form. Access: PUB'
      tags:
        - 'M01: Authentication and User Profile'
      responses:
        '200':
          description: 'Show recover password form'

    post:
      operationId: R107
      summary: 'R107: Recover Password Action'
      description: 'Recover a password of the account associated to the given email. Access: PUB'
      tags:
        - 'M01: Authentication and User Profile'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
               - email
      responses:
        '302':
          description: 'Redirect after processing the recover password request.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'If an account exists with the given email password recovery information will be sent. Redirect to login page.'
                  value: '/login'

  # --------------------------------- USER PROFILE ---------------------------------

  /user/{user_id}:
    get:
      operationId: R108
      summary: 'R108: View User Profile'
      description: 'Show the individual user profile. Access: PUB'
      tags:
        - 'M01: Authentication and User Profile'
      parameters:
        - in: path
          name: user_id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: 'Show User Profile UI'

  # --------------------------------- USER UPDATE ---------------------------------

  /user/{user_id}/update:
    get:
      operationId: R109
      summary: 'R109: Show User Update Form'
      description: 'Provide user update form. Access: USR'
      tags:
        - 'M01: Authentication and User Profile'
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      responses:
        '200':
          description: 'Show user update form'
    
    put:
      operationId: 'R110'
      summary: 'R110: User Update Action'
      description: 'Update a user. Access: USR'
      tags:
        - 'M01: Authentication and User Profile'
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                name:
                  type: string
                pic:
                  type: string    # URL
                description:
                  type: string
      responses:
        '302':
          description: 'Redirect after updating user.'
          headers:
              Location:
                schema:
                  type: string
                examples:
                  302Success:
                    description: 'Successful user update. Redirect to user page.'
                    value: '/user/{user_id}'
                  302Failure:
                    description: 'Failed user update. Redirect to user update form.'
                    value: '/user/{user_id}/update'

  # --------------------------------- USER DELETE ---------------------------------

  /api/user/{user_id}/delete:
    delete:
      operationId: 'R111'
      summary: 'R111: Delete User API'
      description: 'Delete a user. Access: USR'
      tags:
        - 'M01: Authentication and User Profile'
      parameters:
      - in: path
        name: user_id
        description: ID of the user
        schema:
          type: integer
        required: true
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access denied'

  # --------------------------------- SHOW EVENT ---------------------------------

  /event/{event_id}:
    get:
      operationId: R201
      summary: 'R201: View Event Page'
      description: 'Show event page. Access: PUB'
      tags:
        - 'M02: Events'
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      responses:
        '200':
          description: 'Show Event Page UI'

  # --------------------------------- EVENT CREATION ---------------------------------

  /createEvent:
    get:
      operationId: R202
      summary: 'R202: Show Event Creation Form'
      description: 'Provide event creation form. Access: USR'
      tags:
        - 'M02: Events'
      responses:
        '200':
          description: 'Show event creation form'

    post:
      operationId: 'R203'
      summary: 'R203: Event Create Action'
      description: 'Create an event. Access: USR'
      tags:
        - 'M02: Events'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                title:
                  type: string
                image:
                  type: string    # URL
                description:
                  type: string
                location:
                  type: string
                date:
                  type: string
                visibility:
                  type: boolean
                accessability:
                  type: boolean
                capacity:
                  type: integer
                price:
                  type: number
                  format: float
              required:
                - title
                - image
                - description
                - location
                - date
                - visibility
                - accessability
                - capacity
                - price
      responses:
        '302':
          description: 'Redirect after creating event.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Successful event creation. Redirect to event page.'
                  value: '/event/{event_id}'
                302Failure:
                  description: 'Failed event creation. Redirect to event creation form.'
                  value: '/event'
    
  # --------------------------------- EVENT UPDATE ---------------------------------

  /event/{event_id}/update:
    get:
      operationId: R204
      summary: 'R204: Show Event Update Form'
      description: 'Provide event update form. Access: HOST'
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      tags:
        - 'M02: Events'
      responses:
        '200':
          description: 'Show event update form'

    put:
      operationId: 'R205'
      summary: 'R205: Event Update Action'
      description: 'Update an event. Access: HOST'
      tags:
        - 'M02: Events'
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                title:
                  type: string
                image:
                  type: string    # URL
                description:
                  type: string
                location:
                  type: string
                date:
                  type: string
                visibility:
                  type: boolean
                accessability:
                  type: boolean
                capacity:
                  type: integer
                price:
                  type: number
                  format: float
      responses:
        '302':
          description: 'Redirect after updating event.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Successful event update. Redirect to event page.'
                  value: '/event/{event_id}'
                302Failure:
                  description: 'Failed event update. Redirect to event update form.'
                  value: '/event/{event_id}/update'
  
  # --------------------------------- DELETE EVENT ---------------------------------
  
  /api/event/{event_id}/delete:
    delete:
      operationId: 'R206'
      summary: 'R206: Delete Event API'
      description: 'Delete an event. Access: HOST'
      tags:
        - 'M02: Events'
      parameters:
        - in: path
          name: event_id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access denied'

  # --------------------------------- SEARCHING EVENTS ---------------------------------

  /search:  
    get:
      operationId: R206
      summary: 'R206: Search Events Form'
      description: 'Show search events form. Access: PUB'
      tags:
        - 'M02: Events'
      responses:
        '200':
          description: 'Show search events form'

    post:
      operationId: R207
      summary: 'R207: Search Events Action'
      description: 'Showing event search results. Access: PUB'
      tags:
        - 'M02: Events'
      parameters:    # Every query parameter is not required (if none are given: all the events are shown)
        - in: query
          name: name
          description: String to use in full-text search
          schema:
            type: string
          required: false
        - in: query
          name: start_date
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: end_date
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: tag
          schema:
            type: array
            items:
              type: integer
          required: false
      responses:
        '200':    # No redirection, dynamic page using JS
          description: 'Show search page with events that match the given parameters'

  # --------------------------------- TICKET PAYMENT PAGE ---------------------------------
  
  /event/{event_id}/payment:
    get:
      operationId: R208
      summary: 'R208: Ticket Payment Form'
      description: 'Show ticket payment form. Access: USR'
      tags:
        - 'M02: Events'
      parameters:
        - in: path
          name: event_id
          description: ID of the event we want to buy a ticket from
          schema:
            type: number
            format: float
          required: true
      responses:
        '200':
          description: 'Show ticket payment form'

    post:
      operationId: R209
      summary: 'R209: Ticket Payment Action'
      description: 'Buying a ticket for an event. Access: USR'
      tags:
        - 'M02: Events'
      parameters:
        - in: path
          name: event_id
          description: ID of the event we want to buy a ticket from
          schema:
            type: number
            format: float
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                cardType:
                  type: string
                cardNumber:
                  type: integer
                cardExpirationDate:
                  type: string
                  format: date
                CVCNumber:
                  type: integer
              required:
                - name
                - cardType
                - cardNumber
                - cardExpirationDate
                - CVCNumber
      responses:
        '302':
          description: 'Redirect after buying event ticket.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Successful transaction. Redirect to event page.'
                  value: '/event/{event_id}'
                302Failure:
                  description: 'Failed transaction. Redirect to ticket payment form.'
                  value: '/event/{event_id}/payment'

  # --------------------------------- CREATING INVITATIONS ---------------------------------

  /api/invite:
    post:
      operationId: 'R301'
      summary: 'R301: Create Invitation API'
      description: 'Create an invite to an event, from one user to another. Access: USR'
      tags:
        - 'M03: User Interactions'
      parameters:
      - in: query
        name: event_id
        description: ID of the event that the user wants to create an invite to
        schema:
          type: integer
        required: true
      - in: query
        name: inviter_id                                      # IMPORTANT: Should this be ommited with the use of cookies when the user is authenticated?!? We could use the cookie as the input though, it makes sense.
        description: ID of the user that's inviting
        schema:
          type: integer
        required: true
      - in: query
        name: invited_id
        description: ID of the user that's being invited
        schema:
          type: integer
        required: true
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access denied'

    get:
      operationId: 'R302'
      summary: 'R302: Retrieve All Received/Sent Invites API'
      description: 'Return all pending invites a user has received in JSON format. Access: USR'
      tags:
        - 'M03: User Interactions'
      parameters:
        - in: query
          name: user_id
          description: ID of the user who sent the invite / received the invite
          schema:
            type: integer
          required: true
        - in: query
          name: inviteType
          description: Specifies what invites to retrieve (sent by user / received by user or both)
          schema:
            type: string
            enum: [all, sent, received]
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    inviteId:
                      type: integer
                    username:
                      type: string
                    eventTitle:
                      type: string
                example:
                - inviteId: 1
                  inviterUsername: 'fred'
                  eventTitle: 'Sample Event 2022'
                - inviteId: 15
                  inviterUsername: 'an0th3rus3r'
                  eventTitle: 'Defcon 2022'
        '403':
          description: 'Access denied'      # Check if the current authenticated user id matches the id given in the query
    
    put:
      operationId: 'R303'
      summary: 'R303: Answering Invitation API'
      description: 'Accept/deny an invitation to an event. Access: USR'
      tags:
        - 'M03: User Interactions'
      parameters:
        - in: query
          name: user_id
          description: ID of the user that has received the invitation
          schema:
            type: integer
          required: true
        - in: query
          name: invite_id
          description: ID of the invite of the user that we want to modify with the response
          schema:
            type: integer
          required: true
        - in: query
          name: response
          description: The response, TRUE if it was accepted, FALSE otherwise
          schema:
            type: boolean
          required: true
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access denied'

  # --------------------------------- CREATING REQUESTS ---------------------------------

  /api/request:
    post:
      operationId: 'R305'
      summary: 'R305: Create Join Event Request API'
      description: 'Create a request to join the event. Access: USR'
      tags:
        - 'M03: User Interactions'
      parameters:
        - in: query
          name: event_id
          description: ID of the event that the user wants to create a request to
          schema:
            type: integer
          required: true
        - in: query
          name: requester_id
          description: ID of the user that's requesting access
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access denied'

  # --------------------------------- RETRIEVING PENDING REQUESTS SENT ---------------------------------
  /api/requestsSent:
    get:
      operationId: 'R306'
      summary: 'R306: Retrieve All Pending Event Join Requests of a User API'
      description: 'Return all pending event join requests for user in JSON format. Access: USR'
      tags:
        - 'M03: User Interactions'
      parameters:
        - in: query
          name: user_id
          description: ID of the user we want to retrieve requests from
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    requestId:
                      type: integer
                    eventTitle:
                      type: string
                example:
                - requestId: 1
                  eventTitle: 'Sample Event 2022'
                - requestId: 15
                  eventTitle: 'Defcon 2022'
        '403':
          description: 'Access denied'

  # --------------------------------- RETRIEVING PENDING REQUESTS RECIEVED ---------------------------------

  /api/requestsReceived:
    get:
      operationId: 'R307'
      summary: 'R307: Retrieve All Pending Event Join Requests Recieved API'
      description: 'Return all pending event join requests in JSON format. Access: HOST'
      tags:
        - 'M03: User Interactions'
      parameters:
        - in: query
          name: user_id
          description: ID of the user we want to retrieve requests from
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    requestId:
                      type: integer
                    username:
                      type: string
                example:
                - requestId: 1
                  username: 'fred'
                - requestId: 15
                  username: 'an0th3rus3r'
        '403':
          description: 'Access denied'

  # --------------------------------- ACCEPTING/DENYING A REQUEST ---------------------------------

  /api/requestResponse:
    put:
      operationId: 'R308'
      summary: 'R308: Accept/Deny Event Join Request API'
      description: 'Accept/deny a request to join event. Access: HOST'
      tags:
        - 'M03: User Interactions'
      parameters:
        - in: query
          name: host_id
          description: ID of the host of the event
          schema:
            type: integer
          required: true
        - in: query
          name: request_id
          description: ID of the request of the host that we want to modify with the response
          schema:
            type: integer
          required: true
        - in: query
          name: response
          description: The response, TRUE if it was accepted, FALSE otherwise
          schema:
            type: boolean
          required: true
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access denied'

  # --------------------------------- COMMENT ---------------------------------

  /api/comment:
    post:
      operationId: 'R309'
      summary: 'R309: Create Comment API'
      description: 'Create a comment on an event. Access: ATT'
      tags:
        - 'M03: User Interactions'
      parameters:
      - in: query
        name: event_id
        description: ID of the event where the user want to write a comment
        schema:
          type: integer
        required: true
      - in: query
        name: user_id
        description: ID of the user that wants to write a comment (must be an attendee of the event)
        schema:
          type: integer
        required: true
      - in: query
        name: content
        description: Content of the comment
        schema:
          type: string
        required: true          # TODO: We should be able to send a comment without content but with files
      - in: query
        name: files
        description: Files of the comment
        schema:
          type: array
          items:
            file_path:
              type: string      # URL
          minItems: 1
          maxItems: 10
        required: false         # Files not required
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access denied'

    put:
      operationId: 'R310'
      summary: 'R310: Update Comment API'
      description: 'Update a comment on an event. Access: AUT'
      tags:
        - 'M03: User Interactions'
      parameters:
      - in: query
        name: comment_id
        description: ID of the comment
        schema:
          type: integer
        required: true
      - in: query
        name: user_id
        description: ID of the user that wants to update a comment (must be the comment author)
        schema:
          type: integer
        required: true
      - in: query
        name: content
        description: Content of the comment
        schema:
          type: string
        required: true          # TODO: We should be able to send a comment without content but with files
      - in: query
        name: files
        description: Files of the comment
        schema:
          type: array
          items:
            file_path:
              type: string      # URL
          minItems: 1
          maxItems: 10
        required: false         # Files not required
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access denied'

    delete:
      operationId: 'R311'
      summary: 'R311: Delete Comment API'
      description: 'Delete a comment on an event. Access: AUT'
      tags:
        - 'M03: User Interactions'
      parameters:
      - in: query
        name: comment_id
        description: ID of the comment
        schema:
          type: integer
        required: true
      - in: query
        name: user_id
        description: ID of the user that wants to delete a comment (must be the comment author)
        schema:
          type: integer
        required: true
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access denied'

  # --------------------------------- RATING A COMMENT ---------------------------------
  
  /api/rating: # /api/event/{event_id}/comment/{comment_id}/rating
    post:
      operationId: 'R312'
      summary: 'R312: Create Rating on a Comment API'
      description: 'Rating a comment on an event. Access: REA'
      tags:
        - 'M03: User Interactions'
      parameters:
      - in: query
        name: comment_id
        description: ID of the comment
        schema:
          type: integer
        required: true
      - in: query
        name: user_id
        description: ID of the user that wants to rate a comment (mustn't be the comment author)
        schema:
          type: integer
        required: true
      - in: query
        name: rating
        description: Rating of the comment
        schema:
          type: string
          enum:
           - Upvote
           - Downvote
        required: true
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access denied'

    put:
      operationId: 'R313'
      summary: 'R313: Changing Rating of a Comment API'
      description: 'Changing rating of a comment on an event. Access: REA'
      tags:
        - 'M03: User Interactions'
      parameters:
      - in: query
        name: comment_id
        description: ID of the comment
        schema:
          type: integer
        required: true
      - in: query
        name: user_id
        description: ID of the user that wants to rate a comment (mustn't be the comment author)
        schema:
          type: integer
        required: true
      - in: query
        name: rating
        description: Rating of the comment
        schema:
          type: string
          enum:
           - Upvote
           - Downvote
        required: true
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access denied'

    delete:
      operationId: 'R314'
      summary: 'R314: Deleting Rating of a Comment API'
      description: 'Deleting rating of a comment on an event. Access: REA'
      tags:
        - 'M03: User Interactions'
      parameters:
      - in: query
        name: comment_id
        description: ID of the comment
        schema:
          type: integer
        required: true
      - in: query
        name: user_id
        description: ID of the user that wants to remove rating of a comment (mustn't be the comment author)
        schema:
          type: integer
        required: true
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access denied'

  # --------------------------------- JOINING/LEAVING EVENT ---------------------------------

  /api/attendee:
    post:
      operationId: 'R315'
      summary: 'R315: Joining Event API'
      description: 'Joining event. Access: USR'
      tags:
        - 'M03: User Interactions'
      parameters:
      - in: query
        name: event_id
        description: ID of the event the user wants to attend
        schema:
          type: integer
        required: true
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access denied'
    
    delete:
      operationId: 'R316'
      summary: 'R316: Leaving Event API'
      description: 'Leaving event. Access: ATT'
      tags:
        - 'M03: User Interactions'
      parameters:
      - in: query
        name: event_id
        description: ID of the event the user wants to leave
        schema:
          type: integer
        required: true
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access denied'

  # --------------------------------- STATIC PAGES ---------------------------------

  /about:
    get:
      operationId: 'R401'
      summary: 'R401: About Us page'
      description: 'Page with information about the development team. Access: PUB'
      tags:
        - 'M04: Static Pages'
      responses:
        '200':
          description: 'Show about us page'

  /contact:
    get:
      operationId: 'R402'
      summary: 'R402: Contact Us page'
      description: 'Page with contact information. Access: PUB'
      tags:
        - 'M04: Static Pages'
      responses:
        '200':
          description: 'Show contact page'
          
  # --------------------------------- REPORTING EVENT ---------------------------------

  /api/eventReport:
    post:
      operationId: 'R501'
      summary: 'R501: Add Event Report API'
      description: 'Report the specified event. Access: USR, ADM'   # ADM ?
      tags:
        - 'M05: Reports'
      parameters:
      - in: query
        name: event_id
        description: ID of the event the user wants to report
        schema:
          type: integer
        required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                motive:
                  type: string
              required:
                - motive
      responses:
        '200':
          description: 'Report successfully created'
        '403':
          description: 'Access denied'
  
  # --------------------------------- REPORTING COMMENT ---------------------------------

  /api/commentReport:
    post:
      operationId: 'R502'
      summary: 'R502: Add Comment Report API'
      description: 'Report the specified comment. Access: ATT, ADM'
      tags:
        - 'M05: Reports'
      parameters:
      - in: query
        name: comment_id
        description: ID of the comment the user wants to report
        schema:
          type: integer
        required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                motive:
                  type: string
              required:
                - motive
      responses:
        '200':
          description: 'Report successfully created'
        '403':
          description: 'Access denied'

  # --------------------------------- REPORTING USER ---------------------------------

  /api/userReport:
    post:
      operationId: 'R503'
      summary: 'R503: Add User Report API'
      description: 'Report the specified user. Access: USR, ADM'
      tags:
        - 'M05: Reports'
      parameters:
      - in: query
        name: user_id
        description: ID of the user the user wants to report
        schema:
          type: integer
        required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                motive:
                  type: string
              required:
                - motive
      responses:
        '200':
          description: 'Report successful'
        '403':
          description: 'Access denied'
  
  # --------------------------------- UNBLOCK APPEAL ---------------------------------

  /api/unblockAppeal:
    post:
      operationId: 'R504'
      summary: 'R504: Add Unblock Appeal. Access: USR (banned)'
      description: 'Appeal to the account unblock'
      tags:
        - 'M05: Reports'
      responses:
        '200':
          description: 'Unblock request successful'
        '403':
          description: 'Access denied'

  # --------------------------------- REMOVE REPORT ---------------------------------
  
  /api/removeReport:
    post:
      operationId: 'R601'
      summary: 'R601: Remove User Report API'
      description: 'Remove the specified report. Access: ADM'
      tags:
        - 'M06: Administration'
      parameters:
      - in: query
        name: report_id
        description: ID of the report to be deleted
        schema:
          type: integer
        required: true
      responses:
        '200':
          description: 'Report successfully removed'
        '403':
          description: 'Access denied'

  # --------------------------------- BLOCKING USER ---------------------------------

  /api/block:
    put:
      operationId: 'R602'
      summary: 'R602: Change Block Status of User API'
      description: 'Change block status of the specified user. Access: ADM'
      tags:
        - 'M06: Administration'
      parameters:
      - in: query
        name: user_id
        description: ID of the user the administrator wants to block
        schema:
          type: integer
        required: true
      - in: query
        name: block_status
        description: Status of the block of the specified user, TRUE if blocked, FALSE otherwise
        required: true
      responses:
        '200':
          description: 'Change user block status successful'
        '403':
          description: 'Access denied'

# --------------------------------- POST ---------------------------------

  /api/event/{event_id}/post:
    post:
      operationId: 'R315'
      summary: 'R315: Create Post API'
      description: 'Create a post on an event. Access: HOST'
      tags:
        - 'M03: User Interactions'
      parameters:
      - in: query
        name: event_id
        description: ID of the event where the user wants to create a post (must be the host of the event)
        schema:
          type: integer
        required: true
      - in: query
        name: title
        description: Title of the post
        schema:
          type: string
        required: true
      - in: query
        name: description
        description: Description of the post
        schema:
          type: string
        required: true          
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access denied'

    put:
      operationId: 'R316'
      summary: 'R316: Update Post API'
      description: 'Update a post on an event. Access: HOST'
      tags:
        - 'M03: User Interactions'
      parameters:
      - in: query
        name: post_id
        description: ID of the post
        schema:
          type: integer
        required: true
      - in: query
        name: event_id
        description: ID of the event where the user wants to update a post (must be the host of the event)
        schema:
          type: integer
        required: true
      - in: query
        name: title
        description: Title of the post
        schema:
          type: string
        required: true 
      - in: query
        name: description
        description: Description of the post
        schema:
          type: string
        required: true          
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access denied'

    delete:
      operationId: 'R317'
      summary: 'R317: Delete Post API'
      description: 'Delete a post on an event. Access: HOST'
      tags:
        - 'M03: User Interactions'
      parameters:
      - in: query
        name: post_id
        description: ID of the post
        schema:
          type: integer
        required: true
      - in: query
        name: event_id
        description: ID of the event where the user wants to update a post (must be the host of the event)
        schema:
          type: integer
        required: true
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access denied'

# --------------------------------- POLL ---------------------------------

  /api/poll:
    post:
      operationId: 'R318'
      summary: 'R318: Create Poll API'
      description: 'Create a poll on an event. Access: HOST'
      tags:
        - 'M03: User Interactions'
      parameters:
      - in: query
        name: event_id
        description: ID of the event where the user wants to create a poll (must be the host of the event)
        schema:
          type: integer
        required: true
      - in: query
        name: title
        description: Title of the poll
        schema:
          type: string
        required: true
      - in: query
        name: description
        description: Description of the poll
        schema:
          type: string
        required: true 
      - in: query
        name: options
        schema:
          type: array
          items:
            type: integer
        required: true         
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access denied'

    delete:
      operationId: 'R319'
      summary: 'R319: Delete Poll API'
      description: 'Delete a poll on an event. Access: HOST'
      tags:
        - 'M03: User Interactions'
      parameters:
      - in: query
        name: post_id
        description: ID of the poll
        schema:
          type: integer
        required: true
      - in: query
        name: event_id
        description: ID of the event where the user wants to update a post (must be the host of the event)
        schema:
          type: integer
        required: true
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access denied'

# --------------------------------- VOTE ---------------------------------

  /api/vote:
    post:
      operationId: 'R320'
      summary: 'R320: Create Vote on a Poll API'
      description: 'Voting on a poll on an event. Access: ATT'
      tags:
        - 'M03: User Interactions'
      parameters:
      - in: query
        name: option_id
        description: ID of the option
        schema:
          type: integer
        required: true
      - in: query
        name: user_id
        description: ID of the user that wants to vote on an option (must be an attendee)
        schema:
          type: integer
        required: true
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access denied'

    put:
      operationId: 'R321'
      summary: 'R321: Changing Option of a Poll API'
      description: 'Changing option of a poll on an event. Access: ATT'
      tags:
        - 'M03: User Interactions'
      parameters:
      - in: query
        name: option_id
        description: ID of the option
        schema:
          type: integer
        required: true
      - in: query
        name: user_id
        description: ID of the user that wants to vote on an option (must be an attendee)
        schema:
          type: integer
        required: true
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access denied'

    delete:
      operationId: 'R322'
      summary: 'R322: Deleting Option of a Poll API'
      description: 'Deleting option of a poll on an event. Access: ATT'
      tags:
        - 'M03: User Interactions'
      parameters:
      - in: query
        name: option_id
        description: ID of the option
        schema:
          type: integer
        required: true
      - in: query
        name: user_id
        description: ID of the user that wants to remove option of a poll (must be an attendee)
        schema:
          type: integer
        required: true
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access denied'