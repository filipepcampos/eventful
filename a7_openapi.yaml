openapi: 3.0.0

info:
  version: '1.0'
  title: 'LBAW Eventful Web API'
  description: 'Web Resources Specification (A7) for Eventful'

servers:
- url: http://lbaw2122.lbaw.fe.up.pt
  description: Production server

externalDocs:
  description: Find more info here.
  url: https://youtu.be/dQw4w9WgXcQ

tags:
  - name: 'M01: Authentication and User Profile'
  - name: 'M02: Visualizing events'
  - name: 'M03: Name to be decided.'

paths:

  /login:
    get:
      operationId: R101
      summary: 'R101: Login'
      description: 'Provide login form. Access: PUB'
      tags:
        - 'M01: Authentication and User Profile'
      responses:
        '200':
          description: 'Show login form'
    post:
      operationId: R102
      summary: 'R102: Login action'
      description: 'Processes the login form submission. Access: PUB'
      tags:
        - 'M01: Authentication and User Profile'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                  - username
                  - password
      responses:
        '302':
          description: 'Redirect after processing the login credentials.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Successful authentication. Redirect to user profile.'
                  value: '/user/{id}'
                302Error:
                  description: 'Failed authentication. Redirect to login form.'
                  value: '/login'

  /logout:
    post:
      operationId: R103
      summary: 'R103: Logout Action'
      description: 'Logout the current authenticated user. Access: USR, ADM'
      tags:
        - 'M01: Authentication and Individual Profile'
      responses:
        '302':
          description: 'Redirect after processing logout.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Successful logout. Redirect to login form.'
                  value: '/login'

  /register:
    get:
      operationId: R104
      summary: 'R104: Register Form'
      description: 'Provide new user registration form. Access: PUB'
      tags:
        - 'M01: Authentication and User Profile'
      responses:
        '200':
          description: 'Show register UI'
    post:
      operationId: R105
      summary: 'R105: Register Action'
      description: 'Processes the new user registration form submission. Access: PUB'
      tags:
        - 'M01: Authentication and User Profile'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                  format: password
                name:
                  type: string
                picture:
                  type: string
                  format: binary
                birthdate:
                  type: string
                  format: date
              required:
                - username
                - email
                - password
                - name
                - birthdate
      responses:
        '302':
          description: 'Redirect after processing the new user information.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Successful authentication. Redirect to user profile.'
                  value: '/user/{id}'
                302Failure:
                  description: 'Failed authentication. Redirect to register form.'
                  value: '/register'

  /api/recover-password:
    post:
      operationId: R106
      summary: 'R106: Recover password'
      description: 'Recover a password of the account associated to the given email. Access: PUB'
      tags:
        - 'M01: Authentication and User Profile'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: string # TODO: I'm not 100% sure if this is valid
      responses:
        '302':
          description: 'Redirect after processing the recover password request.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'If an account exists with the given email password recovery information will be sent. Redirect to login page.'
                  value: '/login'

  /user/{id}:
    get:
      operationId: R106
      summary: 'R106: View user profile'
      description: 'Show the individual user profile. Access: PUB'
      tags:
        - 'M01: Authentication and Individual Profile'
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: 'Show User Profile UI'

  /api/user/{id}/invites:
    get:
      operationId: 'RXXX'
      summary: 'RXXX: Retrieve all invites a user has received'
      description: 'Return all invites a user has received in json format. Access: USR' # TODO: Make sure this is correct
      tags:
        - 'MXX:'
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    id:
                      type: integer
                    username:
                      type: string
                    eventTitle:
                      type: string
                example:
                - id: 1
                  username: 'fred'
                  eventTitle: 'Sample Event 2022'
                - id: 15
                  username: 'an0th3rus3r'
                  eventTitle: 'Defcon 2022'
        '403':
          description: 'Access denied'

  /api/user/{user_id}/invite/{id}:
    post:
      operationId: 'R302'
      summary: 'R302: Answer invitation'
      description: 'Accept/deny an invitation to an event. Access: USR' # TODO: Make sure this is correct
      tags:
        - 'M03: Name to be decided.'
      parameters:
        - in: path
          name: user_id
          schema:
            type: integer
          required: true
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: boolean
      responses:
        '302':
          description: 'Redirect after processing answer.'
          headers:
              Location:
                schema:
                  type: string
                examples:
                  302Success:
                    description: 'Invite accepted. Redirect to user page.'
                    value: '/' # TODO: Fix this value
                    # TODO: Add invite rejected without giving error      

  /api/user/{id}/requests:
    get:
      operationId: 'RXXX'
      summary: 'RXXX: Retrieve all pending event join requests for user.'
      description: 'Return all pending event join requests for user in json format. Access: USR' # TODO: Make sure this is correct
      tags:
        - 'MXX:'
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    id:
                      type: integer
                    eventTitle:
                      type: string
                example:
                - id: 1
                  username: 'fred'
                  eventTitle: 'Sample Event 2022'
                - id: 15
                  username: 'an0th3rus3r'
                  eventTitle: 'Defcon 2022'
        '403':
          description: 'Access denied'

  /api/event/{id}/requests:
    get:
      operationId: 'RXXX'
      summary: 'RXXX: Retrieve all pending event join requests.'
      description: 'Return all pending event join requests in json format. Access: HOST' # TODO: Make sure this exists
      tags:
        - 'MXX:'
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    id:
                      type: integer
                    username:
                      type: string
                example:
                - id: 1
                  username: 'fred'
                - id: 15
                  username: 'an0th3rus3r'
        '403':
          description: 'Access denied'
    
  /api/event/{event_id}/request/{id}:
    post:
      operationId: 'RXXX'
      summary: 'RXXX: Accept/Deny event join request'
      description: 'Accept/deny request to join event. Access: HOST' # TODO: Make sure this is correct
      tags:
        - 'MXX: Name to be decided.'
      parameters:
        - in: path
          name: event_id
          schema:
            type: integer
          required: true
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: boolean
      responses:
        '302':
          description: 'Redirect after processing answer.'
          headers:
            Location:
              schema:
                type: string
              examples:
                302Success:
                  description: 'Invite accepted. Redirect to user page.'
                  value: '/event/{event_id}'
                  # TODO: Add invite rejected without giving error     

  /event:
    post:
      operationId: 'RXXX'
      summary: 'RXXX: Create event'
      description: 'Create an event. Access: USR'
      tags:
        - 'MXX: Name to be decided.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                title:
                  type: string
                image:
                  type: string    # URL
                description:
                  type: string
                location:
                  type: string
                date:
                  type: string
                visibility:
                  type: boolean
                accessability:
                  type: boolean
                capacity:
                  type: integer
                price:
                  type: number
                  format: float
              required:
                - title
                - image
                - description
                - location
                - date
                - visibility
                - accessability
                - capacity
                - price
      responses:
        '302':
          description: 'Redirect after creating ecent'
          headers:
              Location:
                schema:
                  type: string
                examples:
                  302Success:
                    description: 'Event created successfully. Redirect to event page.'
                    value: '/event/{id}'

  /event/{id}:
    get:
      operationId: R201
      summary: 'R201: View event page'
      description: 'Show event page. Access: ATT'
      tags:
        - 'M02: Visualizing events'
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      responses:
        '200':
          description: 'Show Event Page UI'
  
  /api/event/{id}/invite:
    post:
      operationId: 'R301'
      summary: 'R301: Create invitation'
      description: 'Create an invite to an event, from one user to another. Access: ATT' # TODO: Make sure this is correct
      tags:
        - 'M03: Name to be decided.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                invitedUsername:
                  type: string
              required:
                - invitedUsername
      responses:
        '302':
          description: 'Redirect after processing invite'
          headers:
              Location:
                schema:
                  type: string
                examples:
                  302Success:
                    description: 'Invite created successfully. Redirect to event page.'
                    value: '/event/{id}'
  
  /api/event/{id}/request:
    post:
      operationId: 'RXXX'
      summary: 'RXXX: Create join request'
      description: 'Create a request to join the event. Access: USR' # TODO: Make sure this is correct
      tags:
        - 'MXX: Name to be decided.'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              # TODO: DELETE, I need to figure out how to do this properly
              type: object
              properties:
                invitedUsername:
                  type: string
              required:
                - invitedUsername
              # TODO: DELETE
      responses:
        '302':
          description: 'Redirect after processing invite'
          headers:
              Location:
                schema:
                  type: string
                examples:
                  302Success:
                    description: 'Invite created successfully. Redirect to event page.'
                    value: '/event/{id}'

  /event/{event_id}/comment:
    post:
      operationId: 'RXXX'
      summary: 'RXXX: Create comment'
      description: 'Create a comment on an event. Access: ATT'
      tags:
        - 'MXX: Name to be decided.'
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                content:
                  type: string
                files:
                  type: array
                  items:
                    type: object
                    properties:
                      file_path:
                        type: string
                  minItems: 1                 # Check this out
                  maxItems: 10
              required: 
                - content                     # Array not required
      responses:
        '302':
          description: 'Redirect after successfully creating comment'
          headers:
              Location:
                schema:
                  type: string
                examples:
                  302Success:
                    description: 'Comment created successfully. Redirect to event page.'
                    value: '/event/{event_id}'

  /event/{event_id}/comment/{comment_id}:
    put:
      operationId: 'RXXX'
      summary: 'RXXX: Update comment'
      description: 'Update a comment on an event. Access: AUT'
      tags:
        - 'MXX: Name to be decided.'
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: comment_id
        schema:
          type: integer
        required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                content:
                  type: string
              required:
                - content
      responses:
        '302':
          description: 'Redirect after successfully updating comment'
          headers:
              Location:
                schema:
                  type: string
                examples:
                  302Success:
                    description: 'Comment updated successfully. Redirect to event page.'
                    value: '/event/{event_id}'
    delete:
      operationId: 'RXXX'
      summary: 'RXXX: Delete comment'
      description: 'Delete a comment on an event. Access: AUT'
      tags:
        - 'MXX: Name to be decided.'
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: comment_id
        chema:
          type: integer
        required: true
      responses:
        '302':
          description: 'Redirect after successfully deleting a comment'
          headers:
              Location:
                schema:
                  type: string
                examples:
                  302Success:
                    description: 'Comment deleted successfully. Redirect to event page.'
                    value: '/event/{event_id}'
  
  /event/{event_id}/comment/{comment_id}/user/{user_id}:
    post:
      operationId: 'RXXX'
      summary: 'RXXX: Rating a comment'
      description: 'Rating a comment on an event. Access: REA'
      tags:
        - 'MXX: Name to be decided.'
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: comment_id
        schema:
          type: integer
        required: true
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            name: rating
            schema:
              type: string
              enum:
                - Upvote
                - Downvote
            required: true
      responses:
        '302':
          description: 'Redirect after successfully rating comment'
          headers:
              Location:
                schema:
                  type: string
                examples:
                  302Success:
                    description: 'Comment rated successfully. Redirect to event page.'
                    value: '/event/{event_id}'
    put:
      operationId: 'RXXX'
      summary: 'RXXX: changing rating of a comment'
      description: 'Changing rating of a comment on an event. Access: REA'
      tags:
        - 'MXX: Name to be decided.'
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: comment_id
        schema:
          type: integer
        required: true
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                rating:
                  type: boolean
              required: 
                - rating
      responses:
        '302':
          description: 'Redirect after successfully changing rating of a comment'
          headers:
              Location:
                schema:
                  type: string
                examples:
                  302Success:
                    description: 'Comment rating successfully changed. Redirect to event page.'
                    value: '/event/{event_id}'
    delete:
      operationId: 'RXXX'
      summary: 'RXXX: Deleting rating of a comment'
      description: 'Changing rating of a comment on an event. Access: REA'
      tags:
        - 'MXX: Name to be decided.'
      parameters:
      - in: path
        name: event_id
        schema:
          type: integer
        required: true
      - in: path
        name: comment_id
        schema:
          type: integer
        required: true
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      responses:
        '302':
          description: 'Redirect after successfully deleting rating of a comment'
          headers:
              Location:
                schema:
                  type: string
                examples:
                  302Success:
                    description: 'Comment rating successfully deleted. Redirect to event page.'
                    value: '/event/{event_id}'

  /search:  
    get:
      operationId: R202
      summary: 'R202: Search events'
      description: 'Show event search results. Access: PUB'
      tags:
        - 'M02: Visualizing events'
      parameters:
        - in: query
          name: name
          description: String to use in full-text search
          schema:
            type: string
          required: false
        - in: query
          name: start_date
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: end_date
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: tag
          schema:
            type: array
            items:
              type: integer
          required: false
      responses:
        '200':
          description: 'Show search page with events that match the criteria'

# TODO
# DONE -> Add/edit/delete comment
# DONE -> Add/change comment rating
# DONE -> Create event
# -> Join/create/update/leave/delete event
# -> Payment

# -> Recover password
# -> Invitations and request notification dismissal
# -> Create/Accept/deny invite + requests

# -> Add user report
# -> Add comment report
# -> Add event report
# -> Remove reports (by admin)
# -> Block user admin
# -> Write unblock appeal

# -> Update/Delete user
# -> Create/update/delete post
# -> Create/update/delete poll
# -> Vote on option